nextflow_workflow {

    name "Test Workflow NFCORE_MCMICRO"
    script "workflows/mcmicro.nf"
    workflow "MCMICRO"


    [
        test("cycle: no illumination correction") {

            when {
                params {
                    segmentation = "mesmer"
                }
                workflow {
                    """
                    input[0] = Channel.of(
                        [
                            [id:"TEST1", cycle_number:1, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle1.ome.tif",
                            [],
                            [],
                        ],
                    )
                    input[1] = Channel.of(
                        [
                            [1,1,'DNA_6',[],[],[],[],[],[]],
                            [2,1,'ELANE',[],[],[],[],[],[]],
                            [3,1,'CD57',[],[],[],[],[],[]],
                            [4,1,'CD45',[],[],[],[],[],[]],
                        ],
                    )
                    """
                }
            }

            then {
                assertAll (
                    {
                        assert snapshot (
                            path("$outputDir/registration/ashlar/TEST1.ome.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1.tif"),
                            CsvUtils.summarizeCsv("$outputDir/quantification/mcquant/mesmer/TEST1_mask_TEST1.csv"),
                        ).match()
                    },
                    { assert workflow.success }
                )
            }

        },

        test("cycle: basicpy illumination correction") {

            when {
                params {
                    illumination = "basicpy"
                    segmentation = "mesmer"
                }
                workflow {
                    """
                    input[0] = Channel.of(
                        [
                            [id:"TEST1", cycle_number:1, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle1.ome.tif",
                            [],
                            [],
                        ],
                    )
                    input[1] = Channel.of(
                        [
                            [1,1,'DNA_6',[],[],[],[],[],[]],
                            [2,1,'ELANE',[],[],[],[],[],[]],
                            [3,1,'CD57',[],[],[],[],[],[]],
                            [4,1,'CD45',[],[],[],[],[],[]],
                        ],
                    )
                    """
                }
            }

            then {
                assertAll (
                    {
                        assert snapshot (
                            ImageUtils.getImageMetadata("$outputDir/registration/ashlar/TEST1.ome.tif"),
                            ImageUtils.getImageMetadata("$outputDir/segmentation/deepcell_mesmer/mask_TEST1.tif"),
                            CsvUtils.summarizeCsv("$outputDir/quantification/mcquant/mesmer/TEST1_mask_TEST1.csv"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle1.ome-dfp.tiff"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle1.ome-ffp.tiff")
                        ).match()
                    },
                    { assert workflow.success }
                )
            }
        },

        test("cycle: manual illumination correction") {

            when {
                params {
                    illumination = "manual"
                    segmentation = "mesmer"
                }
                workflow {
                    """
                    input[0] = Channel.of(
                        [
                            [id:"TEST1", cycle_number:1, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle1.ome.tif",
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-dfp.ome.tif",
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-ffp.ome.tif",
                        ],
                    )
                    input[1] = Channel.of(
                        [
                            [1,1,'DNA_6',[],[],[],[],[],[]],
                            [2,1,'ELANE',[],[],[],[],[],[]],
                            [3,1,'CD57',[],[],[],[],[],[]],
                            [4,1,'CD45',[],[],[],[],[],[]],
                        ],
                    )
                    """
                }
            }

            then {
                assertAll (
                    {
                        assert snapshot (
                            path("$outputDir/registration/ashlar/TEST1.ome.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1.tif"),
                            CsvUtils.summarizeCsv("$outputDir/quantification/mcquant/mesmer/TEST1_mask_TEST1.csv")
                        ).match()
                    },
                    { assert workflow.success }
                )
            }
        },

        test("cycle: multiple file ashlar input no correction") {

            when {
                params {
                    segmentation = "mesmer"
                }
                workflow {
                    """
                    input[0] = Channel.of(
                        [
                            [id:"cycif-tonsil", cycle_number:1, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle1.ome.tif",
                            [],
                            [],
                        ],
                        [
                            [id:"cycif-tonsil", cycle_number:2, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle2.ome.tif",
                            [],
                            [],
                        ],
                        [
                            [id:"cycif-tonsil", cycle_number:3, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle3.ome.tif",
                            [],
                            [],
                        ],
                    )
                    input[1] = Channel.of(
                        [
                            [1,1,'DNA_6',[],[],[],[],[],[]],
                            [2,1,'ELANE',[],[],[],[],[],[]],
                            [3,1,'CD57',[],[],[],[],[],[]],
                            [4,1,'CD45',[],[],[],[],[],[]],
                            [5,1,'DNA_7',[],[],[],[],[],[]],
                            [6,1,'ELANE7',[],[],[],[],[],[]],
                            [7,1,'CD577',[],[],[],[],[],[]],
                            [8,1,'CD457',[],[],[],[],[],[]],
                            [9,1,'DNA_8',[],[],[],[],[],[]],
                            [10,1,'ELANE8',[],[],[],[],[],[]],
                            [11,1,'CD578',[],[],[],[],[],[]],
                            [12,1,'CD458',[],[],[],[],[],[]],
                        ],
                    )
                    """
                }
            }

            then {
                assertAll (
                    {
                        assert snapshot (
                            path("$outputDir/registration/ashlar/cycif-tonsil.ome.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_cycif-tonsil.tif"),
                            CsvUtils.summarizeCsv("$outputDir/quantification/mcquant/mesmer/cycif-tonsil_mask_cycif-tonsil.csv")
                        ).match()
                    },
                    { assert workflow.success }
                )
            }
        },

        test("cycle: multiple file ashlar input with multiple samples no correction") {

            when {
                params {
                    segmentation = "mesmer"
                }
                workflow {
                    """
                    input[0] = Channel.of(
                        [
                            [id:"cycif-tonsil", cycle_number:1, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle1.ome.tif",
                            [],
                            [],
                        ],
                        [
                            [id:"cycif-tonsil", cycle_number:2, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle2.ome.tif",
                            [],
                            [],
                        ],
                        [
                            [id:"cycif-tonsil2", cycle_number:1, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle2.ome.tif",
                            [],
                            [],
                        ],
                        [
                            [id:"cycif-tonsil2", cycle_number:2, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle3.ome.tif",
                            [],
                            [],
                        ],
                    )
                    input[1] = Channel.of(
                        [
                            [1,1,'DNA_6',[],[],[],[],[],[]],
                            [2,1,'ELANE',[],[],[],[],[],[]],
                            [3,1,'CD57',[],[],[],[],[],[]],
                            [4,1,'CD45',[],[],[],[],[],[]],
                            [5,1,'DNA_7',[],[],[],[],[],[]],
                            [6,1,'ELANE7',[],[],[],[],[],[]],
                            [7,1,'CD577',[],[],[],[],[],[]],
                            [8,1,'CD457',[],[],[],[],[],[]],
                        ],
                    )
                    """
                }
            }

            then {
                assertAll (
                    {
                        assert snapshot (
                            path("$outputDir/registration/ashlar/cycif-tonsil.ome.tif"),
                            path("$outputDir/registration/ashlar/cycif-tonsil2.ome.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_cycif-tonsil.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_cycif-tonsil2.tif"),
                            CsvUtils.summarizeCsv("$outputDir/quantification/mcquant/mesmer/cycif-tonsil_mask_cycif-tonsil.csv"),
                            CsvUtils.summarizeCsv("$outputDir/quantification/mcquant/mesmer/cycif-tonsil2_mask_cycif-tonsil2.csv"),
                        ).match()
                    },
                    { assert workflow.success }
                )
            }
        },

        test("cycle: multiple file ashlar input with multiple samples no correction, multiple segmentation") {

            when {
                params {
                    segmentation = "mesmer,cellpose"
                }
                workflow {
                    """
                    input[0] = Channel.of(
                        [
                            [id:"cycif-tonsil", cycle_number:1, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle1.ome.tif",
                            [],
                            [],
                        ],
                        [
                            [id:"cycif-tonsil", cycle_number:2, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle2.ome.tif",
                            [],
                            [],
                        ],
                        [
                            [id:"cycif-tonsil2", cycle_number:1, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle2.ome.tif",
                            [],
                            [],
                        ],
                        [
                            [id:"cycif-tonsil2", cycle_number:2, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle3.ome.tif",
                            [],
                            [],
                        ],
                    )
                    input[1] = Channel.of(
                        [
                            [1,1,'DNA_6',[],[],[],[],[],[]],
                            [2,1,'ELANE',[],[],[],[],[],[]],
                            [3,1,'CD57',[],[],[],[],[],[]],
                            [4,1,'CD45',[],[],[],[],[],[]],
                            [5,1,'DNA_7',[],[],[],[],[],[]],
                            [6,1,'ELANE7',[],[],[],[],[],[]],
                            [7,1,'CD577',[],[],[],[],[],[]],
                            [8,1,'CD457',[],[],[],[],[],[]],
                        ],
                    )
                    """
                }
            }

            then {
                assertAll (
                    {
                        assert snapshot (
                            path("$outputDir/registration/ashlar/cycif-tonsil.ome.tif"),
                            path("$outputDir/registration/ashlar/cycif-tonsil2.ome.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_cycif-tonsil.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_cycif-tonsil2.tif"),
                            path("$outputDir/segmentation/cellpose/cycif-tonsil.ome_cp_masks.tif"),
                            path("$outputDir/segmentation/cellpose/cycif-tonsil2.ome_cp_masks.tif"),
                            CsvUtils.summarizeCsv("$outputDir/quantification/mcquant/mesmer/cycif-tonsil_mask_cycif-tonsil.csv"),
                            CsvUtils.summarizeCsv("$outputDir/quantification/mcquant/mesmer/cycif-tonsil2_mask_cycif-tonsil2.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/cellpose/cycif-tonsil_cycif-tonsil.csv"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/cellpose/cycif-tonsil2_cycif-tonsil2.csv"),
                        ).match()
                    },
                    { assert workflow.success }
                )
            }
        },

        test("cycle: multiple file ashlar input with basicpy correction") {

            when {
                params {
                    illumination = "basicpy"
                    segmentation = "mesmer"
                }
                workflow {
                    """
                    input[0] = Channel.of(
                        [
                            [id:"cycif-tonsil", cycle_number:1, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle1.ome.tif",
                            [],
                            [],
                        ],
                        [
                            [id:"cycif-tonsil", cycle_number:2, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle2.ome.tif",
                            [],
                            [],
                        ],
                        [
                            [id:"cycif-tonsil", cycle_number:3, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle3.ome.tif",
                            [],
                            [],
                        ],
                    )
                    input[1] = Channel.of(
                        [
                            [1,1,'DNA_6',[],[],[],[],[],[]],
                            [2,1,'ELANE',[],[],[],[],[],[]],
                            [3,1,'CD57',[],[],[],[],[],[]],
                            [4,1,'CD45',[],[],[],[],[],[]],
                            [5,1,'DNA_7',[],[],[],[],[],[]],
                            [6,1,'ELANE7',[],[],[],[],[],[]],
                            [7,1,'CD577',[],[],[],[],[],[]],
                            [8,1,'CD457',[],[],[],[],[],[]],
                            [9,1,'DNA_8',[],[],[],[],[],[]],
                            [10,1,'ELANE8',[],[],[],[],[],[]],
                            [11,1,'CD578',[],[],[],[],[],[]],
                            [12,1,'CD458',[],[],[],[],[],[]],
                        ],
                    )
                    """
                }
            }

            then {
                assertAll (
                    {
                        assert snapshot (
                            ImageUtils.getImageMetadata("$outputDir/registration/ashlar/cycif-tonsil.ome.tif"),
                            ImageUtils.getImageMetadata("$outputDir/segmentation/deepcell_mesmer/mask_cycif-tonsil.tif"),
                            CsvUtils.summarizeCsv("$outputDir/quantification/mcquant/mesmer/cycif-tonsil_mask_cycif-tonsil.csv"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle1.ome-dfp.tiff"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle1.ome-ffp.tiff"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle2.ome-dfp.tiff"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle2.ome-ffp.tiff"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle3.ome-dfp.tiff"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle3.ome-ffp.tiff")
                        ).match()
                    },
                    { assert workflow.success }
                )
            }
        },

        test("cycle: multiple file ashlar input with multiple samples and basicpy correction") {

            when {
                params {
                    illumination = "basicpy"
                    segmentation = "mesmer"
                }
                workflow {
                    """
                    input[0] = Channel.of(
                        [
                            [id:"cycif-tonsil", cycle_number:1, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle1.ome.tif",
                            [],
                            [],
                        ],
                        [
                            [id:"cycif-tonsil", cycle_number:2, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle2.ome.tif",
                            [],
                            [],
                        ],
                        [
                            [id:"cycif-tonsil2", cycle_number:1, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle2.ome.tif",
                            [],
                            [],
                        ],
                        [
                            [id:"cycif-tonsil2", cycle_number:2, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle3.ome.tif",
                            [],
                            [],
                        ],
                    )
                    input[1] = Channel.of(
                        [
                            [1,1,'DNA_6',[],[],[],[],[],[]],
                            [2,1,'ELANE',[],[],[],[],[],[]],
                            [3,1,'CD57',[],[],[],[],[],[]],
                            [4,1,'CD45',[],[],[],[],[],[]],
                            [5,1,'DNA_7',[],[],[],[],[],[]],
                            [6,1,'ELANE7',[],[],[],[],[],[]],
                            [7,1,'CD577',[],[],[],[],[],[]],
                            [8,1,'CD457',[],[],[],[],[],[]],
                        ],
                    )
                    """
                }
            }

            then {
                assertAll (
                    {
                        assert snapshot (
                            ImageUtils.getImageMetadata("$outputDir/registration/ashlar/cycif-tonsil.ome.tif"),
                            ImageUtils.getImageMetadata("$outputDir/registration/ashlar/cycif-tonsil2.ome.tif"),
                            ImageUtils.getImageMetadata("$outputDir/segmentation/deepcell_mesmer/mask_cycif-tonsil.tif"),
                            ImageUtils.getImageMetadata("$outputDir/segmentation/deepcell_mesmer/mask_cycif-tonsil2.tif"),
                            CsvUtils.summarizeCsv("$outputDir/quantification/mcquant/mesmer/cycif-tonsil_mask_cycif-tonsil.csv"),
                            CsvUtils.summarizeCsv("$outputDir/quantification/mcquant/mesmer/cycif-tonsil2_mask_cycif-tonsil2.csv"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle1.ome-dfp.tiff"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle1.ome-ffp.tiff"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle2.ome-dfp.tiff"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle2.ome-ffp.tiff"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle3.ome-dfp.tiff"),
                            ImageUtils.getImageMetadata("$outputDir/illumination_correction/basicpy/cycif-tonsil-cycle3.ome-ffp.tiff")
                        ).match()
                    },
                    { assert workflow.success }
                )
            }
        },

        test("cycle: no illumination correction, cellpose segmentation") {

            when {
                params {
                    segmentation = "cellpose"
                }
                workflow {
                    """
                    input[0] = Channel.of(
                        [
                            [id:"TEST1", cycle_number:1, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle1.ome.tif",
                            [],
                            [],
                        ],
                    )
                    input[1] = Channel.of(
                        [
                            [1,1,'DNA_6',[],[],[],[],[],[]],
                            [2,1,'ELANE',[],[],[],[],[],[]],
                            [3,1,'CD57',[],[],[],[],[],[]],
                            [4,1,'CD45',[],[],[],[],[],[]],
                        ],
                    )
                    """
                }
            }

            then {
                assertAll (
                    {
                        assert snapshot (
                            path("$outputDir/registration/ashlar/TEST1.ome.tif"),
                            path("$outputDir/segmentation/cellpose/TEST1.ome_cp_masks.tif"),
                            CsvUtils.roundAndHashCsv("$outputDir/quantification/mcquant/cellpose/TEST1_TEST1.csv"),
                        ).match()
                    },
                    { assert workflow.success }
                )
            }

        },

        test("cycle: no illumination correction, coreograph") {

            when {
                params {
                    segmentation = "mesmer"
                    tma_dearray = true
                    pixel_size = 0.7
                }
                workflow {
                    """
                    input[0] = Channel.of(
                        [
                            [id:"TEST1", cycle_number:1, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/core_detection/single_core_dapi.tif",
                            [],
                            [],
                        ],
                    )
                    input[1] = Channel.of(
                        [
                            [1,1,'DNA_6',[],[],[],[],[],[]],
                        ],
                    )
                    """
                }
            }

            then {
                assertAll (
                    {
                        assert snapshot (
                            path("$outputDir/registration/ashlar/TEST1.ome.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1_1.tif"),
                            CsvUtils.summarizeCsv("$outputDir/quantification/mcquant/mesmer/1_mask_TEST1_1.csv"),
                        ).match()
                    },
                    { assert workflow.success }
                )
            }
        },

        test("cycle: no illumination correction, backsub") {

            when {
                params {
                    segmentation = "mesmer"
                    backsub = true
                }
                workflow {
                    """
                    input[0] = Channel.of(
                        [
                            [id:"TEST1", cycle_number:1, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle1.ome.tif",
                            [],
                            [],
                        ],
                        [
                            [id:"TEST1", cycle_number:2, channel_count:4],
                            "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data/imaging/ome-tiff/cycif-tonsil-cycle2.ome.tif",
                            [],
                            [],
                        ],
                    )
                    input[1] = Channel.of(
                        [
                            [1,1,'DNA 1',[],[],[],100,[],[]],
                            [2,1,'Na/K ATPase',[],[],[],100,[],[]],
                            [3,1,'CD3',[],[],[],100,[],[]],
                            [4,1,'CD45RO',[],[],[],100,[],[]],
                            [5,1,'DNA 2',[],[],[],100,[],[]],
                            [6,1,'Antigen Ki67',[],[],[],100,[],[]],
                            [7,1,'Pan-cytokeratin',[],[],[],100,[],[]],
                            [8,1,'Aortic smooth muscle actin',[],[],[],100,[],[]]
                        ],
                    )
                    """
                }
            }

            then {
                assertAll (
                    {
                        assert snapshot (
                            path("$outputDir/registration/ashlar/TEST1.ome.tif"),
                            path("$outputDir/segmentation/deepcell_mesmer/mask_TEST1.tif"),
                            CsvUtils.summarizeCsv("$outputDir/quantification/mcquant/mesmer/TEST1_mask_TEST1.csv"),
                            path("$outputDir/backsub/TEST1.backsub.ome.tif"),
                        ).match()
                    },
                    { assert workflow.success }
                )
            }

        },

    ]
}
